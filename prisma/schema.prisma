// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// CONFIGURATION DE BASE
// ====================
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// ENTITÉS PRINCIPALES
// ==================

// Utilisateur du système
// Un utilisateur peut appartenir à plusieurs organisations ou à aucune
// Il peut suivre plusieurs formations et obtenir des certifications
model User {
    id        String   @id @default(uuid())
    email     String   @unique
    name      String?
    auth0Id   String   @unique // Identifiant externe d'authentification
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    organizations  OrganizationMember[] // Relation avec les organisations (0 à N)
    formations     UserFormation[] // Formations suivies
    certifications UserCertification[] // Certifications obtenues
}

// Organisation cliente
// Représente une entreprise cliente qui peut avoir plusieurs utilisateurs
// et plusieurs builds (environnements 3D)
model Organization {
    id             String   @id @default(uuid())
    name           String
    description    String?
    logoUrl        String?
    azureContainer String? // Container Azure pour stocker les builds
    isActive       Boolean  @default(true)
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    // Relations
    members OrganizationMember[] // Membres de l'organisation
    builds  Build[] // Builds appartenant à cette organisation
}

// Membre d'une organisation
// Table de jointure entre User et Organization
// Permet de définir le rôle d'un utilisateur dans une organisation
model OrganizationMember {
    id       String   @id @default(uuid())
    role     String // OWNER, ADMIN, MEMBER, etc.
    joinedAt DateTime @default(now())

    // Relations (clés étrangères)
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    // Contrainte d'unicité: un utilisateur ne peut être qu'une fois dans une organisation
    @@unique([userId, organizationId])
}

// Build Unity
// Représente un build 3D stocké sur Azure
// Appartient à une organisation et peut être lié à une formation
model Build {
    id            String   @id @default(uuid())
    name          String
    version       String
    description   String?
    containerName String // Nom du container Azure
    externalId    String? // ID externe (référence sur Azure)
    status        String   @default("available") // available, deprecated, etc.
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    // Relations
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    // Relation optionnelle avec Formation (un build peut avoir 0 ou 1 formation)
    formationId String?
    formation   Formation? @relation(fields: [formationId], references: [id])

    // Les utilisateurs qui suivent ce build
    userFormations UserFormation[]
}

// FORMATIONS ET CONTENU
// ====================

// Formation
// Représente une formation complète avec son contenu pédagogique
// Peut être liée à plusieurs builds
model Formation {
    id            String   @id @default(uuid())
    formationId   String   @unique // ID externe (ex: "LOTO_Acces_Zone_Robot")
    name          String
    description   String
    imageUrl      String?
    category      String // Sécurité, Qualité, etc.
    difficulty    String // Débutant, Intermédiaire, Avancé
    duration      String // Durée estimée (ex: "45 min")
    objectMapping Json? // Mapping des objets 3D (stocké en JSON)
    version       String   @default("1.0")
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    // Relations
    modules        FormationModule[] // Modules de la formation
    builds         Build[] // Builds associés à cette formation
    certifications UserCertification[] // Certifications délivrées pour cette formation
}

// Module de formation
// Représente un module/chapitre d'une formation
// Peut être de type "guide" (étapes guidées) ou "question" (questionnaire)
model FormationModule {
    id          String   @id @default(uuid())
    moduleId    String // ID externe (ex: "controller-guide")
    title       String
    description String?
    type        String // "guide" ou "question"
    order       Int // Ordre d'affichage dans la formation
    content     Json // Contenu détaillé (étapes, questions, etc.) en JSON
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    formationId String
    formation   Formation @relation(fields: [formationId], references: [id], onDelete: Cascade)

    // Relation avec la progression des utilisateurs
    userProgresses UserModuleProgress[]

    // Contrainte d'unicité: un moduleId doit être unique au sein d'une formation
    @@unique([formationId, moduleId])
}

// PROGRESSION UTILISATEUR
// ======================

// Inscription d'un utilisateur à une formation
// Représente l'enregistrement d'un utilisateur à une formation via un build spécifique
model UserFormation {
    id             String    @id @default(uuid())
    startedAt      DateTime  @default(now())
    lastAccessedAt DateTime  @default(now())
    completedAt    DateTime? // null si la formation n'est pas terminée

    // Relations
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    buildId String
    build   Build  @relation(fields: [buildId], references: [id])

    // Progression dans les modules
    moduleProgresses UserModuleProgress[]

    // Contrainte d'unicité: un utilisateur ne peut s'inscrire qu'une fois à un build spécifique
    @@unique([userId, buildId])
}

// Progression d'un utilisateur dans un module
// Suivi de la progression et du score pour chaque module
model UserModuleProgress {
    id          String    @id @default(uuid())
    isCompleted Boolean   @default(false)
    score       Int? // Score obtenu (si applicable)
    startedAt   DateTime  @default(now())
    completedAt DateTime? // null si le module n'est pas terminé

    // Relations
    userFormationId String
    userFormation   UserFormation @relation(fields: [userFormationId], references: [id], onDelete: Cascade)

    moduleId String
    module   FormationModule @relation(fields: [moduleId], references: [id])

    // Contrainte d'unicité: un module ne peut être suivi qu'une fois par inscription
    @@unique([userFormationId, moduleId])
}

// Certification obtenue par un utilisateur
// Représente un certificat délivré à un utilisateur pour une formation
model UserCertification {
    id               String    @id @default(uuid())
    obtainedAt       DateTime  @default(now())
    expiresAt        DateTime? // Date d'expiration (si applicable)
    formationVersion String // Version de la formation pour laquelle la certification a été obtenue

    // Relations
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    formationId String
    formation   Formation @relation(fields: [formationId], references: [id])

    // Contrainte d'unicité: un utilisateur ne peut obtenir qu'une certification par version de formation
    @@unique([userId, formationId, formationVersion])
}
