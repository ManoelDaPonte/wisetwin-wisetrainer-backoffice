
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  auth0Id: 'auth0Id',
  email: 'email',
  name: 'name',
  azureContainer: 'azureContainer',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CourseScalarFieldEnum = {
  id: 'id',
  courseId: 'courseId',
  name: 'name',
  description: 'description',
  imageUrl: 'imageUrl',
  category: 'category',
  difficulty: 'difficulty',
  duration: 'duration',
  sourceType: 'sourceType',
  sourceOrganizationId: 'sourceOrganizationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserCourseScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  courseId: 'courseId',
  progress: 'progress',
  lastAccessed: 'lastAccessed',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ModuleScalarFieldEnum = {
  id: 'id',
  moduleId: 'moduleId',
  courseId: 'courseId',
  title: 'title',
  description: 'description',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ScenarioScalarFieldEnum = {
  id: 'id',
  scenarioId: 'scenarioId',
  moduleId: 'moduleId',
  title: 'title',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  questionId: 'questionId',
  scenarioId: 'scenarioId',
  text: 'text',
  type: 'type',
  explanation: 'explanation',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OptionScalarFieldEnum = {
  id: 'id',
  optionId: 'optionId',
  questionId: 'questionId',
  text: 'text',
  isCorrect: 'isCorrect',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserModuleScalarFieldEnum = {
  id: 'id',
  userCourseId: 'userCourseId',
  moduleId: 'moduleId',
  completed: 'completed',
  score: 'score',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserResponseScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  scenarioId: 'scenarioId',
  questionId: 'questionId',
  selectedAnswers: 'selectedAnswers',
  isCorrect: 'isCorrect',
  score: 'score',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AchievementScalarFieldEnum = {
  id: 'id',
  achievementId: 'achievementId',
  title: 'title',
  description: 'description',
  iconName: 'iconName',
  criteria: 'criteria',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserAchievementScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  achievementId: 'achievementId',
  unlockedAt: 'unlockedAt',
  data: 'data',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserStatsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  totalTimeSpent: 'totalTimeSpent',
  sessionsCompleted: 'sessionsCompleted',
  questionsAnswered: 'questionsAnswered',
  correctAnswers: 'correctAnswers',
  lastActivity: 'lastActivity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  startTime: 'startTime',
  endTime: 'endTime',
  duration: 'duration',
  courseId: 'courseId',
  modulesViewed: 'modulesViewed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  logoUrl: 'logoUrl',
  azureContainer: 'azureContainer',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrganizationMemberScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  userId: 'userId',
  role: 'role',
  joinedAt: 'joinedAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrganizationTrainingScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  courseId: 'courseId',
  buildId: 'buildId',
  isCustomBuild: 'isCustomBuild',
  isActive: 'isActive',
  assignedAt: 'assignedAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrganizationInvitationScalarFieldEnum = {
  id: 'id',
  email: 'email',
  organizationId: 'organizationId',
  inviteCode: 'inviteCode',
  role: 'role',
  status: 'status',
  invitedBy: 'invitedBy',
  invitedAt: 'invitedAt',
  expiresAt: 'expiresAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrganizationTagScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  name: 'name',
  color: 'color',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserTagScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  tagId: 'tagId',
  assignedAt: 'assignedAt'
};

exports.Prisma.TagTrainingScalarFieldEnum = {
  id: 'id',
  tagId: 'tagId',
  courseId: 'courseId',
  assignedAt: 'assignedAt'
};

exports.Prisma.FormationContentScalarFieldEnum = {
  id: 'id',
  contentId: 'contentId',
  formationId: 'formationId',
  title: 'title',
  description: 'description',
  type: 'type',
  order: 'order',
  educationalTitle: 'educationalTitle',
  educationalText: 'educationalText',
  imageUrl: 'imageUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FormationStepScalarFieldEnum = {
  id: 'id',
  stepId: 'stepId',
  contentId: 'contentId',
  title: 'title',
  instruction: 'instruction',
  validationEvent: 'validationEvent',
  validationType: 'validationType',
  hint: 'hint',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FormationQuestionScalarFieldEnum = {
  id: 'id',
  questionId: 'questionId',
  contentId: 'contentId',
  text: 'text',
  type: 'type',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FormationOptionScalarFieldEnum = {
  id: 'id',
  optionId: 'optionId',
  questionId: 'questionId',
  text: 'text',
  isCorrect: 'isCorrect',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FormationScalarFieldEnum = {
  id: 'id',
  formationId: 'formationId',
  name: 'name',
  description: 'description',
  imageUrl: 'imageUrl',
  category: 'category',
  difficulty: 'difficulty',
  duration: 'duration',
  objectMapping: 'objectMapping',
  buildId: 'buildId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  User: 'User',
  Course: 'Course',
  UserCourse: 'UserCourse',
  Module: 'Module',
  Scenario: 'Scenario',
  Question: 'Question',
  Option: 'Option',
  UserModule: 'UserModule',
  UserResponse: 'UserResponse',
  Achievement: 'Achievement',
  UserAchievement: 'UserAchievement',
  UserStats: 'UserStats',
  UserSession: 'UserSession',
  Organization: 'Organization',
  OrganizationMember: 'OrganizationMember',
  OrganizationTraining: 'OrganizationTraining',
  OrganizationInvitation: 'OrganizationInvitation',
  OrganizationTag: 'OrganizationTag',
  UserTag: 'UserTag',
  TagTraining: 'TagTraining',
  FormationContent: 'FormationContent',
  FormationStep: 'FormationStep',
  FormationQuestion: 'FormationQuestion',
  FormationOption: 'FormationOption',
  Formation: 'Formation'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
